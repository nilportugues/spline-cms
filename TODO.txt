curl -i -H "Accept: application/vnd.api+json" \
 -H "Content-Type: application/vnd.api+json" \
  -X POST -d '{
        "data": {
            "type": "repository",
            "attributes": {
                "name": "svtse"
            }
        }
        }' \
  http://localhost:8081/api/repository


curl -i -H "Accept: application/vnd.api+json" \
 -H "Content-Type: application/vnd.api+json" \
  -X POST -d '{
        "data": {
            "type": "folder",
            "attributes": {
                "name": "nyheter"
            },
            "relationships": {
                "parent": {
                    "data": {
                        "type": "folder",
                        "id": "363665a9-7bce-412a-b765-7d7950aac648"
                    }
                }
            }
        }
  }' \
  http://localhost:8081/api/folder

curl -i -H "Accept: application/vnd.api+json" \
 -H "Content-Type: application/vnd.api+json" \
  -X POST -d '{
        "data": {
            "type": "document",
            "attributes": {
                "name": "document"
            },
            "relationships": {

            }
        }
  }' \
  http://localhost:8081/api/document

curl -i -H "Accept: application/vnd.api+json" \
 -H "Content-Type: application/vnd.api+json" \
  -X POST -d '{
        "data": {
            "type": "type",
            "attributes": {
                "name": "document_type",
                "baseType": "DOCUMENT",
                "properties": [
                {
                    "name": "title",
                    "queryName": "title",
                    "displayName": "Titel",
                    "description": "Typ av rubrik. (Storlek)",
                    "propertyType": "STRING",
                    "cardinality": "SINGLE",
                    "choice": [
                    {
                    "displayName": "Rubrik",
                    "value": [
                    "H3"
                    ],
                    "choice": [ ]
                    }
                    ,
                    {
                    "displayName": "Underrubrik",
                    "value": [
                    "H4"
                    ],
                    "choice": [ ]
                    }
                    ],
                    "defaultValue": [
                    "H1"
                    ],
                    "updatability": "ONCREATE",
                    "inherited": false,
                    "required": false,
                    "openChoice": false
                }]
            },
            "relationships": {

            }
        }
  }' \
  http://localhost:8081/api/type


- Remove all neo4j-entities from api-web. Make query-neo4j a runtime-dependency. Use web-model for all repositories etc.
    - Add another query-impl, to change from/to


- Consul-spring boot config. (Spring-boot-cloud)

- Type (id (default), name*, namespace, queryName, parent*)
	- Create
	- Add
	- Delete
	- Update (?)

- Policy

- Properties:
	- String
	- Boolean
	- Integer
	- DateTime
	- Decimal
	- Uri

- Repository (id (default), name*)

- Folder
	- Create (id (default), name*, type*, repository, parent)
	- AddParameters <- Properties
	- DeleteParameters <- Properties
	- Delete

	- ChangeType

	- AddSubType
	- DeleteSubType

- Document (id (default), name*, type*)
    - Create
	- Delete
	- AddFields
	- DeleteFields
	- AddParameters (name, type, value)
	- DeleteParameters

	- AddSubType
    - DeleteSubType

    - add event
    - delete event

- Relation
	- Create
	- Delete
	- AddParameters
	- DeleteParameters


Request              Domain                         Command                     Event                                   Entry

RepositoryRequest -> Repository               ->    CreateRepositoryCommand     RepositoryCreatedEvent
                        -  id                                                           ->
                        - metadata                                              CreateRootFolderCommand
                               - name                                           UpdateRepositoryRootFolderComammand
                               - description


TODOS:

- Extends Katharsis to handle builders instead of empty constuctor.
- Swagger to Katharsis. https://github.com/woonsan/swagger-katharsis OR https://github.com/meshuga/katharsis-springfox
    (OR DO IT YOURSELF)
     /*
            final List<String> paths = resourceRegistry.getResources().entrySet().stream()
                .map(classRegistryEntryEntry -> resourceRegistry.getResourceUrl(classRegistryEntryEntry.getKey()))
                .collect(Collectors.toList());

            System.out.println("*************** " + paths);
            */
- TimestampCutoffReadonlyEventStore for time-events.

- Names Spline, Grooves, Shaft
